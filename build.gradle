subprojects {
    plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }
}

def osName = System.properties["os.name"].toLowerCase().replaceAll("\\s+", "")
def osArch = System.properties["os.arch"]
def distDir = "${projectDir}/dist"
def output = "${distDir}/surpass"
def jre = "${distDir}/jre"
def distArchive = "${distDir}/surpass-${version}-${osName}-${osArch}.zip"

task generateAppImage(type: Exec) {
    doFirst {
        delete distDir
    }

    def jlink = new File(System.getProperty("java.home"), "/bin/jlink")
    def surpassMods = ["surpass.api", "surpass.app", "surpass.core", "surpass.persist", "surpass.gui"]
    def modulePath = surpassMods.collect { new File(project(it).buildDir, "libs/${it}-${version}.jar") }.join(System.properties["path.separator"])
    commandLine jlink, "--module-path", modulePath, "--add-modules", surpassMods.join(","), 
                "--output", output, "--launcher", "surpass=surpass.gui/org.esoul.surpass.gui.Main", 
                "--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"
}

import org.apache.tools.ant.taskdefs.condition.Os

generateAppImage.doLast {
    delete "${output}/bin/surpass.bat"
    delete "${output}/bin/surpass"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        copy {
            from files("${projectDir}/bin/surpass_image.bat", "${projectDir}/bin/surpass.exe")
            into output
			rename "surpass_image.bat", "surpass.bat"
        }
    } else {
        copy {
            from "${projectDir}/bin/surpass"
            into output
        }
        ant.chmod(file: "${output}/surpass", perm: "+x")
    }

    ant.zip(basedir: distDir, destfile: distArchive)
}

task generateJre(type: Exec) {
    doFirst {
        delete jre
    }

    def jlink = new File(System.getProperty("java.home"), "/bin/jlink")
    commandLine jlink, "--add-modules", "java.desktop,java.logging,jdk.httpserver", "--output", jre, 
                "--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"
}

task generateAppDist(type: Copy) {
    doFirst {
        delete output
		delete distArchive
    }

    dependsOn = [":surpass.google.drive:jar", ":surpass.gui:jar", ":surpass.persist:jar", ":generateJre"]

    def surpassMods = ["surpass.app", "surpass.core", "surpass.persist", "surpass.google.drive", "surpass.gui"]
    def modulePath = surpassMods.collect { new File(project(it).buildDir, "libs/${it}-${version}.jar") }

    fileTree(new File(project("surpass.google.drive").buildDir, "libs")).visit { details ->
        modulePath << details.file.path
    }

    from modulePath
    into "${output}/mods"

    doLast {
        copy {
            from files("${projectDir}/bin/surpass_dist.bat", "${projectDir}/bin/surpass.exe")
            into output
            rename "surpass_dist.bat", "surpass.bat"
        }
		copy {
		    from jre
			into "${output}/jre"
		}
		ant.zip(basedir: output, destfile: distArchive)
    }
}
